---
// FindingsSection.astro - Displays the findings section with collapsible cards
---
<section id="data" class="content-section">
  <div class="section-container">
    <h2 class="section-title">Analysis</h2>
    <div class="findings-components">
      <div class="finding-card" id="finding-card-1">
        <div class="finding-header">
          <h3 class="finding-title">Smoothness and Training Dynamics</h3>
          <!-- <div class="expand-icon">-</div> -->
        </div>
        <div class="finding-content active">
          <p>To demonstrate that the RMs trained with TDRM are smoother, we analyze their behavior across various dimensions.</p>
          <p>First, we calculate a metric inspired by local Lipschitz continuity to quantify the smoothness of the RMs.</p>
        </div>
        <div class="image-container">
          <img src="/formula.png" style="width:35%" alt="">
        </div>
        <div class="finding-content active">
          <p>It is shown that TDRM (0.2741) is significantly smoother than the ScalarPRM (0.3331) according to this metric.</p>
          <br>
          <p>Furthermore, we analyze the smoothness by comparing TD error across steps, and TD error vs. absolute value difference.</p>
        </div>
        <div class="image-container">
          <img src="/smoothness_comparison.jpg" alt="">
        </div>
        <div class="finding-content active">
          <p>By examining the TD error across steps, we observe that TDRM consistently outperforms ScalarPRM, indicating its superior smoothness. And we also show the training dynamics of RL using TDRM, showcasing that TDRM can also improve the sample efficiency of RL training.</p>
        </div>
        <div class="image-container">
          <img src="/across_steps_rl_training.png" style="width:80%; margin-top: 1rem; border-radius: 8px;" alt="">
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .image-container {
    display: flex;
    justify-content: center; /* centers horizontally */
    margin: 1rem 0;          /* add spacing */
  }

  .findings-components {
    margin-bottom: 3rem;
  }

  .finding-card {
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    margin-bottom: 1.5rem;
    transition: all 0.3s ease;
  }

  .finding-card:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    transform: translateY(-5px);
  }

  .finding-header {
    padding: 1.2rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    color: white;
  }

  /* Different background colors for each finding card */
  .finding-card:nth-child(1) .finding-header { background-color: #2a2f6c; }
  .finding-card:nth-child(2) .finding-header { background-color: #4a3f9f; }
  .finding-card:nth-child(3) .finding-header { background-color: #5e56b2; }
  .finding-card:nth-child(4) .finding-header { background-color: #7165d8; }
  .finding-card:nth-child(5) .finding-header { background-color: #9f7cd2; }
  .finding-card:nth-child(6) .finding-header { background-color: #2a2f6c; }

  .finding-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    flex: 1;
  }

  .expand-icon {
    font-size: 1.5rem;
    font-weight: bold;
    transition: transform 0.3s ease;
    margin-left: 1rem;
  }

  .finding-content {
    padding: 1.5rem;
    display: none;
    line-height: 1.7;
  }

  .finding-content p {
    margin: 0;
    font-size: 1.1rem;
  }

  .finding-content.active {
    display: block;
    animation: fadeIn 0.5s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Add highlighting for key terms */
  .finding-content strong {
    color: #4a3f9f;
    background-color: rgba(74, 63, 159, 0.1);
    padding: 0.1rem 0.3rem;
    border-radius: 3px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Set up event listeners for all finding cards
    for (let i = 1; i <= 6; i++) {
      const findingCard = document.getElementById(`finding-card-${i}`);
      const findingContent = document.getElementById(`finding-content-${i}`);
      
      if (findingCard && findingContent) {
        const expandIcon = findingCard.querySelector('.expand-icon') as HTMLElement | null;
        
        // Initialize all cards as expanded
        findingContent.classList.add('active');
        if (expandIcon) {
          expandIcon.textContent = '-';
        }
        
        findingCard.addEventListener('click', (e: Event) => {
          const target = e.target as HTMLElement;
          if (target.closest && target.closest('.finding-content')) return;
          
          findingContent.classList.toggle('active');
          if (expandIcon) {
            if (findingContent.classList.contains('active')) {
              expandIcon.textContent = '-';
            } else {
              expandIcon.textContent = '+';
            }
          }
        });
      }
    }
  });
</script> 